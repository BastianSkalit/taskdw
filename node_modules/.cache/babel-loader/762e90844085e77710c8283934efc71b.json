{"ast":null,"code":"var _jsxFileName = \"/home/bastian/Documents/taskdw/src/Component/Category.js\";\nimport React, { Component } from \"react\";\nimport ScrollMenu from \"react-horizontal-scrolling-menu\";\nimport \"../App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { Button, Container } from \"@material-ui/core\";\nimport Axios from \"axios\";\nimport slugify from \"slugify\"; // list of items\n\nconst list = [{\n  name: \"Animals\",\n  target: \"/category\"\n}, {\n  name: \"Education\",\n  target: \"/category\"\n}, {\n  name: \"Jungle\",\n  target: \"/category\"\n}, {\n  name: \"Sport\",\n  target: \"/category\"\n}, {\n  name: \"Technology\",\n  target: \"/category\"\n}, {\n  name: \"Style\",\n  target: \"/category\"\n}, {\n  name: \"Human\",\n  target: \"/category\"\n}];\nvar lists = [];\nconst url = \"/category/\";\nconst url1 = \"/articles\";\nconsole.log(lists, \"ini lists\"); // One item component\n// selected prop will be passed\n\nconst MenuItem = ({\n  text,\n  target,\n  selected\n}) => {\n  return React.createElement(Link, {\n    to: url + slugify(target) + url1,\n    style: {\n      textDecoration: \"none\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Button, {\n    style: {\n      color: \"#000\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, text));\n}; // All items component\n// Important! add unique key\n\n\nexport const Menu = (name, target) => list.map(el => {\n  return React.createElement(MenuItem, {\n    text: el.name,\n    key: el.name,\n    target: el.target,\n    selected: selected,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  });\n});\n\nconst Arrow = ({\n  text,\n  className\n}) => {\n  return React.createElement(\"div\", {\n    className: className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, text);\n};\n\nconst ArrowLeft = Arrow({\n  text: \"<\",\n  className: \"arrow-prev\"\n});\nconst ArrowRight = Arrow({\n  text: \">\",\n  className: \"arrow-next\"\n});\nconst selected = \"item1\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props); // call it again if items count changes\n\n    this.state = {\n      selected\n    };\n\n    this.onSelect = key => {\n      this.setState({\n        selected: key\n      });\n    };\n\n    this.menuItems = Menu(list, selected);\n    this.state = {\n      menu: []\n    };\n  }\n\n  componentDidMount() {\n    Axios({\n      method: \"get\",\n      url: \"http://localhost:3000/api/v1/categories\"\n    }).then(res => {\n      console.log(res.data);\n      this.setState({\n        menu: res.data\n      });\n    });\n  }\n\n  render() {\n    const selected = this.state.selected; // Create menu from items\n    // const menu = this.menuItems;\n\n    console.log(lists);\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(ScrollMenu, {\n      data: this.state.menu.map(item => {\n        return React.createElement(MenuItem, {\n          text: item.name,\n          key: item.name,\n          target: item.name,\n          selected: selected,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        });\n      }),\n      arrowLeft: ArrowLeft,\n      arrowRight: ArrowRight,\n      selected: selected,\n      onSelect: this.onSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/bastian/Documents/taskdw/src/Component/Category.js"],"names":["React","Component","ScrollMenu","BrowserRouter","Router","Switch","Route","Link","Button","Container","Axios","slugify","list","name","target","lists","url","url1","console","log","MenuItem","text","selected","textDecoration","color","Menu","map","el","Arrow","className","ArrowLeft","ArrowRight","App","constructor","props","state","onSelect","key","setState","menuItems","menu","componentDidMount","method","then","res","data","render","item"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ScrollMenu from \"react-horizontal-scrolling-menu\";\nimport \"../App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { Button, Container } from \"@material-ui/core\";\nimport Axios from \"axios\";\nimport slugify from \"slugify\";\n\n// list of items\nconst list = [\n  {\n    name: \"Animals\",\n    target: \"/category\"\n  },\n  {\n    name: \"Education\",\n    target: \"/category\"\n  },\n  {\n    name: \"Jungle\",\n    target: \"/category\"\n  },\n  {\n    name: \"Sport\",\n    target: \"/category\"\n  },\n  {\n    name: \"Technology\",\n    target: \"/category\"\n  },\n  {\n    name: \"Style\",\n    target: \"/category\"\n  },\n  {\n    name: \"Human\",\n    target: \"/category\"\n  }\n];\nvar lists = [];\nconst url = \"/category/\";\nconst url1 = \"/articles\";\nconsole.log(lists, \"ini lists\");\n// One item component\n// selected prop will be passed\nconst MenuItem = ({ text, target, selected }) => {\n  return (\n    <Link to={url + slugify(target) + url1} style={{ textDecoration: \"none\" }}>\n      <Button style={{ color: \"#000\" }}>{text}</Button>\n    </Link>\n  );\n};\n\n// All items component\n// Important! add unique key\nexport const Menu = (name, target) =>\n  list.map(el => {\n    return (\n      <MenuItem\n        text={el.name}\n        key={el.name}\n        target={el.target}\n        selected={selected}\n      />\n    );\n  });\n\nconst Arrow = ({ text, className }) => {\n  return <div className={className}>{text}</div>;\n};\n\nconst ArrowLeft = Arrow({ text: \"<\", className: \"arrow-prev\" });\nconst ArrowRight = Arrow({ text: \">\", className: \"arrow-next\" });\n\nconst selected = \"item1\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // call it again if items count changes\n    this.menuItems = Menu(list, selected);\n    this.state = {\n      menu: []\n    };\n  }\n  componentDidMount() {\n    Axios({\n      method: \"get\",\n      url: \"http://localhost:3000/api/v1/categories\"\n    }).then(res => {\n      console.log(res.data);\n      this.setState({ menu: res.data });\n    });\n  }\n  state = {\n    selected\n  };\n\n  onSelect = key => {\n    this.setState({ selected: key });\n  };\n\n  render() {\n    const { selected } = this.state;\n    // Create menu from items\n    // const menu = this.menuItems;\n    console.log(lists);\n    return (\n      <div className=\"App\">\n        <Container>\n          <ScrollMenu\n            data={this.state.menu.map(item => {\n              return (\n                <MenuItem\n                  text={item.name}\n                  key={item.name}\n                  target={item.name}\n                  selected={selected}\n                />\n              );\n            })}\n            arrowLeft={ArrowLeft}\n            arrowRight={ArrowRight}\n            selected={selected}\n            onSelect={this.onSelect}\n          />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}